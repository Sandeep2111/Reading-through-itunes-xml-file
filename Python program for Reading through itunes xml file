
#Importing xml and sql libraries

import xml.etree.ElementTree as ET
import sqlite3

# creating database file and handling the file

conn=sqlite3.connect('trackdbp.sqlite')
cur=conn.cursor()

#deleting any existing table so that if the file is made to run multiple times the created table and records are deleted

cur.executescript('''
DROP TABLE IF EXISTS Artist;
DROP TABLE IF EXISTS Album;
DROP TABLE IF EXISTS Track;


#creating the tables.

CREATE TABLE Artist(
	id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
	name TEXT UNIQUE);


CREATE TABLE Album(
	id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
	artist_id INTEGER,
	title TEXT UNIQUE);


CREATE TABLE Track(
	id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
	title TEXT UNIQUE,
	album_id INTEGER,
	len INTEGER,rating INTEGER,count INTEGER);
''')


# opening the xml file

fname= input('Enter the file name:')

# A function to read all data in child xml file 
def lookup(d,key):
	found=False
	for child in d:
		if found:
			return child.text
		if child.tag =='key' and child.text==key:
			found=True
	return None

# parsing the xml file for extraction of data

stuff=ET.parse(fname)
all=stuff.findall('dict/dict/dict')
print('dict count',len(all))

#looping through the dict data in xml file and calling the function to extract the data in the child tags 
#adding the extracted values or data to the table with the SQL commands

for entry in all:
	if (lookup(entry,'Track ID') is None):
		continue
	name=lookup(entry,'Name')
	artist=lookup(entry,'Artist')
	album=lookup(entry,'Album')
	count=lookup(entry,'Play Count')
	rating=lookup(entry,'Rating')
	length=lookup(entry,'Total Time')

	if name is None or artist is None or album is None:
		continue
	print(name,artist,album,count,rating,length)

	cur.execute('''INSERT OR IGNORE INTO Artist(name)
		VALUES(?)''',(artist,))
	cur.execute('''SELECT id FROM Artist WHERE name= ?''',(artist,))
	artist_id=cur.fetchone()[0]

	cur.execute('''INSERT OR IGNORE INTO Album(title,artist_id)
		VALUES(?,?)''',(album,artist_id))
	cur.execute('''SELECT id FROM Album WHERE title=?''',(album,))
	album_id=cur.fetchone()[0]

	cur.execute('''INSERT OR REPLACE INTO Track(title,album_id,len,rating,count)
		VALUES(?,?,?,?,?)''',(name,album_id,length,rating,count))

	conn.commit()


   #cur.execute('''INSERT OR REPLACE INTO Track(title,album_id,len,rating,count) 
   #     VALUES(?,?,?,?,?)''',(name,album_id,length,rating,count))

